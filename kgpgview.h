/**************************************************************************
                          kgpgview.h  -  description
                             -------------------
    begin                : Tue Jul  2 12:31:38 GMT 2002
    copyright          : (C) 2002 by Jean-Baptiste Mardelle
    email                : bj@altern.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#ifndef __KGPGVIEW_H__
#define __KGPGVIEW_H__

#include <ktextedit.h>
#include <kurl.h>

class QDragEnterEvent;
class QDropEvent;

class KgpgInterface;

/**
 * The KgpgView class provides the view widget for the KgpgApp instance.
 * The View instance inherits QWidget as a base class and represents the view object of a KTMainWindow. As KgpgView is part of the
 * docuement-view model, it needs a reference to the document object connected with it by the KgpgApp class to manipulate and display
 * the document structure provided by the KgpgDoc class.
 *
 * @author Source Framework Automatically Generated by KDevelop, (c) The KDevelop Team.
 * @version KDevelop version 0.4 code generation
 */
class KgpgTextEdit : public KTextEdit
{
    Q_OBJECT

public:
    KgpgTextEdit(QWidget *parent = 0, const char *name = 0);
    ~KgpgTextEdit();

public slots:
    void slotDroppedFile(const KURL &url);
    bool slotCheckContent(const QString &filetocheck, const bool &checkforpgpmessage = true);
    void slotDecodeFile(const QString &fname);

protected:
    void contentsDragEnterEvent(QDragEnterEvent *e);
    void contentsDropEvent(QDropEvent *e);

private slots:
    void editorUpdateDecryptedtxt(const QString &newtxt, KgpgInterface *interface);
    void editorFailedDecryptedtxt(const QString &newtxt, KgpgInterface *interface);

private:
    QString m_tempfile;
};

class KgpgView : public QWidget
{
    Q_OBJECT
    friend class KgpgTextEdit;

public:
    /** Constructor for the main view */
    KgpgView(QWidget *parent = 0, const char *name = 0);

    /** Destructor for the main view */
    ~KgpgView();

    /** returns a pointer to the document connected to the view instance. Mind that this method requires a KgpgApp instance as a parent
     * widget to get to the window document pointer by calling the KgpgApp::getDocument() method.
     *
     * @see KgpgApp#getDocument
     */
    //  KgpgDoc *getDocument() const;

    /** contains the implementation for printing functionality */
    // void print(QPrinter *pPrinter);

    KgpgTextEdit *editor;
    bool windowAutoClose;

signals:
    void resetEncoding(bool);
    void verifyFinished();
    void verifyDetach();

public slots:
    void clearSign();
    void slotEncode();
    void slotDecode();

private slots:
    void updateDecryptedtxt(QString newtxt, KgpgInterface *interface);
    void failedDecryptedtxt(QString newtxt, KgpgInterface *interface);

    void slotAskForImport(QString id, KgpgInterface *interface);
    void slotVerifyResult(QString mssge, QString log, KgpgInterface *interface);
    void slotSignResult(QString signResult, KgpgInterface *interface);

    void encodeTxt(QStringList selec, QStringList encryptOptions, bool, bool symmetric);
    void updateTxt(QString, KgpgInterface*);

    void modified();
    bool checkForUtf8(QString text);

private:
    QPushButton *bouton0;
    QPushButton *bouton1;
    QPushButton *bouton2;
};

#endif // __KGPGVIEW_H__
